# Claude Slash Commands Library

A collection of powerful slash commands for Claude Code to enhance your development workflow.

## Setup Instructions

To set up this library in your Claude Code environment:

1. Create the Claude commands directory:
   ```bash
   mkdir -p ~/.claude/commands
   cd ~/.claude/commands
   ```

2. Download and extract the library:
   - Visit https://github.com/Open-Agent-Tools/claude_slash_commands_library
   - Click the green "Code" button
   - Select "Download ZIP"
   - Extract the ZIP file contents into the `~/.claude/commands` directory

That's it! The slash commands are now available in your Claude Code sessions.

## Available Commands

### `/check` - Quick Status Check
Performs a comprehensive status check of your project including:
- Git status and recent commits
- GitHub workflow status
- Package build verification
- Tool availability validation

### `/cleanup` - Code Quality and Cleanup
Automatically improves code quality by:
- Running linting and formatting (ruff)
- Type checking with mypy
- Fixing identified issues
- Updating TODO files
- Creating a clean commit

### `/load` - Load Markdown Files
Loads all markdown files from a directory into context for analysis:
- Finds all .md files in current or specified directory
- Brings content into Claude's context
- Provides summary of loaded files

### `/publish` - Release Management
Manages the release process for your project:
- Validates semantic versioning
- Runs cleanup and tests
- Updates version references
- Creates GitHub releases
- Monitors publishing workflow
- Supports auto-increment: `patch`, `minor`, or `major`

### `/review` - Code Review
Provides comprehensive code review with:
- Best practice analysis
- Performance optimization suggestions
- Error handling improvements
- Language-specific recommendations
- Automatic fixes for common issues

### `/scaffold` - Project Creation
Creates new projects from templates:
- Supports Python, Node.js, Rust, Go, and more
- Sets up complete project structure
- Configures CI/CD pipelines
- Initializes testing frameworks
- Creates documentation
- Uses UV for Python dependency management

### `/test` - Comprehensive Testing
Runs complete test suite with detailed reporting:
- Executes pytest with coverage
- Reports pass/fail statistics
- Analyzes test failures
- Attempts automatic fixes
- Provides specific recommendations

## Contributing

To add new slash commands:
1. Create a new `.md` file in this directory
2. Follow the existing command structure
3. Test thoroughly
4. Submit a pull request

## License

This project is licensed under the MIT License - see the LICENSE file for details.